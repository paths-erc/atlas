{"version":3,"sources":["components/Loading/Loading.jsx","components/Loading/Ripple-1.7s-200px.svg","App.js","registerServiceWorker.js","index.js"],"names":["Loading","props","style","width","src","Ripple","alt","children","module","exports","BrowserNotSupported","lazy","MainTemplate","Home","PathsMap","SearchSaved","SearchSimple","SearchAdv","SearchEncoded","SearchAll","Intro","ViewOne","Charts","Cite","Api","browser","detect","window","location","href","match","ReactGA","initialize","pageview","pathname","search","compatibility","notSupported","bName","name","bVersion","version","split","Object","keys","indexOf","App","fallback","basename","path","component","exact","library","add","fas","fab","faArrowCircleRight","faBug","faEye","faExternalLinkSquareAlt","faFilter","faGithub","faIdBadge","faLink","faMapMarkerAlt","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e377f01.chunk.js","sourcesContent":["import React from 'react';\nimport Ripple from './Ripple-1.7s-200px.svg';\n\n\n\nexport default function Loading(props) {\n\n  const style = {\n    width: props.width ? props.width : '100px'\n  };\n  return (\n    <span>\n      <img src={Ripple} style={style} alt=\"Loading...\"/>\n      {\n        props.children !== '' ? props.children : <span>Loading...</span>\n      }\n    </span>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/Ripple-1.7s-200px.7466db60.svg\";","import React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faArrowCircleRight, faBug, faEye, faExternalLinkSquareAlt, faFilter, faIdBadge, faLink, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nimport Loading from './components/Loading/Loading';\n\nimport ReactGA from 'react-ga';\nimport { detect } from 'detect-browser';\n\nconst BrowserNotSupported = lazy(() => import('./components/Home/BrowserNotSupported'));\nconst MainTemplate = lazy(() => import('./components/mainLayout/MainTemplate'));\nconst Home = lazy(() => import('./components/Home/Home'));\nconst PathsMap = lazy(() => import('./components/PathsMap/PathsMap'));\n\nconst SearchSaved = lazy(() => import('./components/Search/SearchSaved'));\nconst SearchSimple = lazy(() => import('./components/Search/SearchSimple'));\nconst SearchAdv = lazy(() => import('./components/Search/SearchAdv'));\nconst SearchEncoded = lazy(() => import('./components/Search/SearchEncoded'));\nconst SearchAll = lazy(() => import('./components/Search/SearchAll'));\n\nconst Intro = lazy(() => import('./components/Intro/Intro'));\nconst ViewOne = lazy(() => import('./components/Record/ViewOne'));\nconst Charts = lazy(() => import('./components/Charts/Charts'));\nconst Cite = lazy(() => import('./components/Cite/Cite'));\nconst Api = lazy(() => import('./components/Api/Api'));\n\nconst browser = detect();\n\n\nif(window.location.href.match(/atlas\\.paths-erc\\.eu/g)){\n  ReactGA.initialize('UA-10461068-45');\n  ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nconst compatibility = {\n  'ie': 10000,\n  'opera-mini': 10000,\n  'bb10': 10000,\n  'edge': 14,\n  'firefox': 39,\n  'chrome': 42, // 42\n  'safari': 11,\n  'opera': 29,\n  'android': 67,\n}\n\nlet notSupported = false;\nif (browser){\n  const bName = browser.name;\n  const bVersion = browser.version.split('.')[0];\n\n  if ( Object.keys(compatibility).indexOf(bName) > -1 && bVersion < compatibility[bName] ) {\n    notSupported = true;\n  }\n}\n\nlibrary.add(fas, fab, faArrowCircleRight, faBug, faEye, faExternalLinkSquareAlt, faFilter, faGithub, faIdBadge, faLink, faMapMarkerAlt);\n\n\nexport default function App () {\n\n    if (notSupported){\n      return (\n        <Suspense fallback={<Loading />}>\n          <BrowserNotSupported browser={browser} compatibility={compatibility} />\n        </Suspense>\n        )\n    }\n\n    return (\n      <BrowserRouter basename=\"/\">\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path='/map/:action?/:data?' component={PathsMap}/>\n            <MainTemplate>\n              <Route exact path='/' component={ Home } />\n              <Route exact path='/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)' component={Intro} />\n              <Route exact path='/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)/:id' component={ViewOne} />\n\n              <Route exact path='/search/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)/saved' component={SearchSaved} />\n              <Route exact path='/search/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)/all' component={SearchAll} />\n              <Route exact path='/search/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)/adv' component={SearchAdv} />\n              <Route exact path='/search/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)/encoded' component={SearchEncoded} />\n              <Route exact path='/search/:table(places|titles|works|manuscripts|authors|colophons|persons|collections)' component={SearchSimple} />\n\n              <Route exact path='/charts/:id?' component={Charts} />\n              <Route exact path='/cite' component={Cite} />\n              <Route exact path='/api' component={Api} />\n\n            </MainTemplate>\n          </Switch>\n        </Suspense>\n      </BrowserRouter>\n    );}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { unregister } from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\nunregister();\n"],"sourceRoot":""}